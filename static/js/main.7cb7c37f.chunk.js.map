{"version":3,"sources":["components/Todos.jsx","components/AddTodo.jsx","components/Search.jsx","components/Navbar.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Todos","props","count","list","length","displayList","map","x","className","key","id","todo","onClick","deleteTodo","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","addNew","onSubmit","this","onChange","type","htmlFor","Component","Search","Navbar","M","AutoInit","href","data-target","App","todolist","searchField","Math","random","newTodoArray","newList","filter","letters","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cb7c37f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Todos = (props) => {\n    const count = props.list.length\n    const displayList = props.list.map(x=>{\n        return(\n            <li className=\"collection-item\" key={x.id}>\n                {x.todo}\n                <div onClick={()=>{props.deleteTodo(x.id)}} className=\"secondary-content indigo lighten-2 btn-small\">\n                    <i className=\"material-icons\">done</i>\n                </div>\n            </li>\n        )\n    })\n    \n    return (\n        <div>\n            <p>You have {count} todos</p>\n            <ul className=\"collection\">\n                {displayList}\n            </ul>\n            \n        </div>\n    )\n}\n\nexport default Todos\n","import React, { Component } from 'react'\n// // eslint-disable-next-line\n// import M from 'materialize-css'\n\nclass AddTodo extends Component {\n    state = {\n        todo:''\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]:e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        if (this.state.todo!=='')\n            this.props.addNew(this.state)\n        this.setState({\n            todo:''\n        })\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <h3 className=\"center-align\">Add New Todo</h3>\n                <form onSubmit={this.handleSubmit} className=\"input-field\">\n                    <input value ={this.state.todo} onChange={this.handleChange} type=\"text\" id=\"todo\"/>\n                    <label htmlFor=\"new\">Enter New Todo</label>\n                    <button type='submit' className=\"btn indigo center lighten-1\">\n                        <span>Add</span>\n                        <i className=\"material-icons indigo-text text-darken-4 right\">done</i>\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddTodo\n","import React from 'react'\n// eslint-disable-next-line\nconst Search = ({Search}) => {\n    return (\n        <div className='container'>\n            <div className=\"search-bar\">\n                <div className=\"input-field\">\n                    <input type='search' onChange={(e)=>{Search(e.target.value)}} type=\"text\" name=\"\" id=\"search-box\"/>\n                    <label htmlFor=\"search-box\">Search Todos</label>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Search\n","import React,{Component} from 'react'\nimport M from 'materialize-css'\n\nclass Navbar extends Component{\n\n    componentDidMount(){\n        M.AutoInit()\n    }\n    \n    render(){\n        return (\n            <nav className=\"nav-wrapper indigo\">\n                <div className=\"container\">\n                    <a href=\"#\" className=\"sidenav-trigger\" data-target='mobile-view'>\n                        <i className=\"material-icons\">menu</i>\n                    </a>\n                    <a href=\"#\" className=\"brand-logo\">Todos</a>\n                    <ul className='right hide-on-med-and-down'>               \n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">About</a></li>\n                        <li><a href=\"#\">Contacts</a></li>\n                    </ul>\n                    <ul className='sidenav' id='mobile-view' >               \n                        <li><a href=\"#\">Home</a></li>\n                        <li><a href=\"#\">About</a></li>\n                        <li><a href=\"#\">Contacts</a></li>\n                    </ul>\n                </div>\n            </nav>\n        )\n    }    \n}\n\nexport default Navbar\n","import React, { Component } from 'react'\nimport Todos from './components/Todos.jsx'\nimport AddTodo from './components/AddTodo.jsx'\nimport Search from './components/Search.jsx'\nimport Navbar from './components/Navbar'\n\nclass App extends Component {\n\n  state = {\n    todolist:[\n      {id:0,todo:\"Play Sonic Dash\"},\n      {id:1,todo:\"Get Cheese Pizza\"},\n      {id:2,todo:\"Kick Mario's butt\"},\n    ],\n    searchField:''\n  }\n\n  addNew = (e) => {\n    e.id = Math.random()\n    const newTodoArray = [...this.state.todolist,e]\n    this.setState({\n      todolist:newTodoArray\n    })\n  }\n\n  deleteTodo = (id) =>{\n    const newList = this.state.todolist.filter(x=>{\n      return x.id !== id\n    })\n    this.setState({\n      todolist:newList\n    })\n  }\n\n  Search = (letters) => {\n    this.setState({\n      searchField:letters\n    })\n  }\n\n  render(){\n\n    const todolist = this.state.todolist.filter(x=>{\n      return x.todo.toLowerCase().includes(this.state.searchField.toLowerCase())\n    })\n\n    return(\n      <div className='App'>\n        <Navbar/>\n        <div className=\"container\">\n          <h1 className='center'>TodoApp</h1>\n          <Search Search={this.Search}/>\n          <Todos list={todolist} deleteTodo={this.deleteTodo}/>      \n          <AddTodo addNew={this.addNew}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}